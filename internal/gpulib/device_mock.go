// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gpulib

import (
	"sync"
)

// Ensure, that DeviceMock does implement Device.
// If this is not the case, regenerate this file with moq.
var _ Device = &DeviceMock{}

// DeviceMock is a mock implementation of Device.
//
//	func TestSomethingThatUsesDevice(t *testing.T) {
//
//		// make and configure a mocked Device
//		mockedDevice := &DeviceMock{
//			GetAttributesFunc: func() (DeviceAttributes, Return) {
//				panic("mock out the GetAttributes method")
//			},
//			GetComputeInstanceIdFunc: func() (int, Return) {
//				panic("mock out the GetComputeInstanceId method")
//			},
//			GetDeviceHandleFromMigDeviceHandleFunc: func() (Device, Return) {
//				panic("mock out the GetDeviceHandleFromMigDeviceHandle method")
//			},
//			GetGpuInstanceIdFunc: func() (int, Return) {
//				panic("mock out the GetGpuInstanceId method")
//			},
//			GetMaxMigDeviceCountFunc: func() (int, Return) {
//				panic("mock out the GetMaxMigDeviceCount method")
//			},
//			GetMigDeviceHandleByIndexFunc: func(n int) (Device, Return) {
//				panic("mock out the GetMigDeviceHandleByIndex method")
//			},
//			GetMigModeFunc: func() (int, int, Return) {
//				panic("mock out the GetMigMode method")
//			},
//			GetMinorNumberFunc: func() (int, Return) {
//				panic("mock out the GetMinorNumber method")
//			},
//			GetNvLinkRemotePciInfoFunc: func(n int) (PciInfo, Return) {
//				panic("mock out the GetNvLinkRemotePciInfo method")
//			},
//			GetNvLinkStateFunc: func(n int) (EnableState, Return) {
//				panic("mock out the GetNvLinkState method")
//			},
//			GetPciInfoFunc: func() (PciInfo, Return) {
//				panic("mock out the GetPciInfo method")
//			},
//			GetTopologyCommonAncestorFunc: func(device Device) (GpuTopologyLevel, Return) {
//				panic("mock out the GetTopologyCommonAncestor method")
//			},
//			GetUUIDFunc: func() (string, Return) {
//				panic("mock out the GetUUID method")
//			},
//			RegisterEventsFunc: func(v uint64, eventSet EventSet) Return {
//				panic("mock out the RegisterEvents method")
//			},
//		}
//
//		// use mockedDevice in code that requires Device
//		// and then make assertions.
//
//	}
type DeviceMock struct {
	// GetAttributesFunc mocks the GetAttributes method.
	GetAttributesFunc func() (DeviceAttributes, Return)

	// GetComputeInstanceIdFunc mocks the GetComputeInstanceId method.
	GetComputeInstanceIdFunc func() (int, Return)

	// GetDeviceHandleFromMigDeviceHandleFunc mocks the GetDeviceHandleFromMigDeviceHandle method.
	GetDeviceHandleFromMigDeviceHandleFunc func() (Device, Return)

	// GetGpuInstanceIdFunc mocks the GetGpuInstanceId method.
	GetGpuInstanceIdFunc func() (int, Return)

	// GetMaxMigDeviceCountFunc mocks the GetMaxMigDeviceCount method.
	GetMaxMigDeviceCountFunc func() (int, Return)

	// GetMigDeviceHandleByIndexFunc mocks the GetMigDeviceHandleByIndex method.
	GetMigDeviceHandleByIndexFunc func(n int) (Device, Return)

	// GetMigModeFunc mocks the GetMigMode method.
	GetMigModeFunc func() (int, int, Return)

	// GetMinorNumberFunc mocks the GetMinorNumber method.
	GetMinorNumberFunc func() (int, Return)

	// GetNvLinkRemotePciInfoFunc mocks the GetNvLinkRemotePciInfo method.
	GetNvLinkRemotePciInfoFunc func(n int) (PciInfo, Return)

	// GetNvLinkStateFunc mocks the GetNvLinkState method.
	GetNvLinkStateFunc func(n int) (EnableState, Return)

	// GetPciInfoFunc mocks the GetPciInfo method.
	GetPciInfoFunc func() (PciInfo, Return)

	// GetTopologyCommonAncestorFunc mocks the GetTopologyCommonAncestor method.
	GetTopologyCommonAncestorFunc func(device Device) (GpuTopologyLevel, Return)

	// GetUUIDFunc mocks the GetUUID method.
	GetUUIDFunc func() (string, Return)

	// RegisterEventsFunc mocks the RegisterEvents method.
	RegisterEventsFunc func(v uint64, eventSet EventSet) Return

	// calls tracks calls to the methods.
	calls struct {
		// GetAttributes holds details about calls to the GetAttributes method.
		GetAttributes []struct {
		}
		// GetComputeInstanceId holds details about calls to the GetComputeInstanceId method.
		GetComputeInstanceId []struct {
		}
		// GetDeviceHandleFromMigDeviceHandle holds details about calls to the GetDeviceHandleFromMigDeviceHandle method.
		GetDeviceHandleFromMigDeviceHandle []struct {
		}
		// GetGpuInstanceId holds details about calls to the GetGpuInstanceId method.
		GetGpuInstanceId []struct {
		}
		// GetMaxMigDeviceCount holds details about calls to the GetMaxMigDeviceCount method.
		GetMaxMigDeviceCount []struct {
		}
		// GetMigDeviceHandleByIndex holds details about calls to the GetMigDeviceHandleByIndex method.
		GetMigDeviceHandleByIndex []struct {
			// N is the n argument value.
			N int
		}
		// GetMigMode holds details about calls to the GetMigMode method.
		GetMigMode []struct {
		}
		// GetMinorNumber holds details about calls to the GetMinorNumber method.
		GetMinorNumber []struct {
		}
		// GetNvLinkRemotePciInfo holds details about calls to the GetNvLinkRemotePciInfo method.
		GetNvLinkRemotePciInfo []struct {
			// N is the n argument value.
			N int
		}
		// GetNvLinkState holds details about calls to the GetNvLinkState method.
		GetNvLinkState []struct {
			// N is the n argument value.
			N int
		}
		// GetPciInfo holds details about calls to the GetPciInfo method.
		GetPciInfo []struct {
		}
		// GetTopologyCommonAncestor holds details about calls to the GetTopologyCommonAncestor method.
		GetTopologyCommonAncestor []struct {
			// Device is the device argument value.
			Device Device
		}
		// GetUUID holds details about calls to the GetUUID method.
		GetUUID []struct {
		}
		// RegisterEvents holds details about calls to the RegisterEvents method.
		RegisterEvents []struct {
			// V is the v argument value.
			V uint64
			// EventSet is the eventSet argument value.
			EventSet EventSet
		}
	}
	lockGetAttributes                      sync.RWMutex
	lockGetComputeInstanceId               sync.RWMutex
	lockGetDeviceHandleFromMigDeviceHandle sync.RWMutex
	lockGetGpuInstanceId                   sync.RWMutex
	lockGetMaxMigDeviceCount               sync.RWMutex
	lockGetMigDeviceHandleByIndex          sync.RWMutex
	lockGetMigMode                         sync.RWMutex
	lockGetMinorNumber                     sync.RWMutex
	lockGetNvLinkRemotePciInfo             sync.RWMutex
	lockGetNvLinkState                     sync.RWMutex
	lockGetPciInfo                         sync.RWMutex
	lockGetTopologyCommonAncestor          sync.RWMutex
	lockGetUUID                            sync.RWMutex
	lockRegisterEvents                     sync.RWMutex
}

// GetAttributes calls GetAttributesFunc.
func (mock *DeviceMock) GetAttributes() (DeviceAttributes, Return) {
	callInfo := struct {
	}{}
	mock.lockGetAttributes.Lock()
	mock.calls.GetAttributes = append(mock.calls.GetAttributes, callInfo)
	mock.lockGetAttributes.Unlock()
	if mock.GetAttributesFunc == nil {
		var (
			deviceAttributesOut DeviceAttributes
			returnOut           Return
		)
		return deviceAttributesOut, returnOut
	}
	return mock.GetAttributesFunc()
}

// GetAttributesCalls gets all the calls that were made to GetAttributes.
// Check the length with:
//
//	len(mockedDevice.GetAttributesCalls())
func (mock *DeviceMock) GetAttributesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAttributes.RLock()
	calls = mock.calls.GetAttributes
	mock.lockGetAttributes.RUnlock()
	return calls
}

// GetComputeInstanceId calls GetComputeInstanceIdFunc.
func (mock *DeviceMock) GetComputeInstanceId() (int, Return) {
	callInfo := struct {
	}{}
	mock.lockGetComputeInstanceId.Lock()
	mock.calls.GetComputeInstanceId = append(mock.calls.GetComputeInstanceId, callInfo)
	mock.lockGetComputeInstanceId.Unlock()
	if mock.GetComputeInstanceIdFunc == nil {
		var (
			nOut      int
			returnOut Return
		)
		return nOut, returnOut
	}
	return mock.GetComputeInstanceIdFunc()
}

// GetComputeInstanceIdCalls gets all the calls that were made to GetComputeInstanceId.
// Check the length with:
//
//	len(mockedDevice.GetComputeInstanceIdCalls())
func (mock *DeviceMock) GetComputeInstanceIdCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetComputeInstanceId.RLock()
	calls = mock.calls.GetComputeInstanceId
	mock.lockGetComputeInstanceId.RUnlock()
	return calls
}

// GetDeviceHandleFromMigDeviceHandle calls GetDeviceHandleFromMigDeviceHandleFunc.
func (mock *DeviceMock) GetDeviceHandleFromMigDeviceHandle() (Device, Return) {
	callInfo := struct {
	}{}
	mock.lockGetDeviceHandleFromMigDeviceHandle.Lock()
	mock.calls.GetDeviceHandleFromMigDeviceHandle = append(mock.calls.GetDeviceHandleFromMigDeviceHandle, callInfo)
	mock.lockGetDeviceHandleFromMigDeviceHandle.Unlock()
	if mock.GetDeviceHandleFromMigDeviceHandleFunc == nil {
		var (
			deviceOut Device
			returnOut Return
		)
		return deviceOut, returnOut
	}
	return mock.GetDeviceHandleFromMigDeviceHandleFunc()
}

// GetDeviceHandleFromMigDeviceHandleCalls gets all the calls that were made to GetDeviceHandleFromMigDeviceHandle.
// Check the length with:
//
//	len(mockedDevice.GetDeviceHandleFromMigDeviceHandleCalls())
func (mock *DeviceMock) GetDeviceHandleFromMigDeviceHandleCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDeviceHandleFromMigDeviceHandle.RLock()
	calls = mock.calls.GetDeviceHandleFromMigDeviceHandle
	mock.lockGetDeviceHandleFromMigDeviceHandle.RUnlock()
	return calls
}

// GetGpuInstanceId calls GetGpuInstanceIdFunc.
func (mock *DeviceMock) GetGpuInstanceId() (int, Return) {
	callInfo := struct {
	}{}
	mock.lockGetGpuInstanceId.Lock()
	mock.calls.GetGpuInstanceId = append(mock.calls.GetGpuInstanceId, callInfo)
	mock.lockGetGpuInstanceId.Unlock()
	if mock.GetGpuInstanceIdFunc == nil {
		var (
			nOut      int
			returnOut Return
		)
		return nOut, returnOut
	}
	return mock.GetGpuInstanceIdFunc()
}

// GetGpuInstanceIdCalls gets all the calls that were made to GetGpuInstanceId.
// Check the length with:
//
//	len(mockedDevice.GetGpuInstanceIdCalls())
func (mock *DeviceMock) GetGpuInstanceIdCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetGpuInstanceId.RLock()
	calls = mock.calls.GetGpuInstanceId
	mock.lockGetGpuInstanceId.RUnlock()
	return calls
}

// GetMaxMigDeviceCount calls GetMaxMigDeviceCountFunc.
func (mock *DeviceMock) GetMaxMigDeviceCount() (int, Return) {
	callInfo := struct {
	}{}
	mock.lockGetMaxMigDeviceCount.Lock()
	mock.calls.GetMaxMigDeviceCount = append(mock.calls.GetMaxMigDeviceCount, callInfo)
	mock.lockGetMaxMigDeviceCount.Unlock()
	if mock.GetMaxMigDeviceCountFunc == nil {
		var (
			nOut      int
			returnOut Return
		)
		return nOut, returnOut
	}
	return mock.GetMaxMigDeviceCountFunc()
}

// GetMaxMigDeviceCountCalls gets all the calls that were made to GetMaxMigDeviceCount.
// Check the length with:
//
//	len(mockedDevice.GetMaxMigDeviceCountCalls())
func (mock *DeviceMock) GetMaxMigDeviceCountCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMaxMigDeviceCount.RLock()
	calls = mock.calls.GetMaxMigDeviceCount
	mock.lockGetMaxMigDeviceCount.RUnlock()
	return calls
}

// GetMigDeviceHandleByIndex calls GetMigDeviceHandleByIndexFunc.
func (mock *DeviceMock) GetMigDeviceHandleByIndex(n int) (Device, Return) {
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockGetMigDeviceHandleByIndex.Lock()
	mock.calls.GetMigDeviceHandleByIndex = append(mock.calls.GetMigDeviceHandleByIndex, callInfo)
	mock.lockGetMigDeviceHandleByIndex.Unlock()
	if mock.GetMigDeviceHandleByIndexFunc == nil {
		var (
			deviceOut Device
			returnOut Return
		)
		return deviceOut, returnOut
	}
	return mock.GetMigDeviceHandleByIndexFunc(n)
}

// GetMigDeviceHandleByIndexCalls gets all the calls that were made to GetMigDeviceHandleByIndex.
// Check the length with:
//
//	len(mockedDevice.GetMigDeviceHandleByIndexCalls())
func (mock *DeviceMock) GetMigDeviceHandleByIndexCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockGetMigDeviceHandleByIndex.RLock()
	calls = mock.calls.GetMigDeviceHandleByIndex
	mock.lockGetMigDeviceHandleByIndex.RUnlock()
	return calls
}

// GetMigMode calls GetMigModeFunc.
func (mock *DeviceMock) GetMigMode() (int, int, Return) {
	callInfo := struct {
	}{}
	mock.lockGetMigMode.Lock()
	mock.calls.GetMigMode = append(mock.calls.GetMigMode, callInfo)
	mock.lockGetMigMode.Unlock()
	if mock.GetMigModeFunc == nil {
		var (
			nOut1     int
			nOut2     int
			returnOut Return
		)
		return nOut1, nOut2, returnOut
	}
	return mock.GetMigModeFunc()
}

// GetMigModeCalls gets all the calls that were made to GetMigMode.
// Check the length with:
//
//	len(mockedDevice.GetMigModeCalls())
func (mock *DeviceMock) GetMigModeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMigMode.RLock()
	calls = mock.calls.GetMigMode
	mock.lockGetMigMode.RUnlock()
	return calls
}

// GetMinorNumber calls GetMinorNumberFunc.
func (mock *DeviceMock) GetMinorNumber() (int, Return) {
	callInfo := struct {
	}{}
	mock.lockGetMinorNumber.Lock()
	mock.calls.GetMinorNumber = append(mock.calls.GetMinorNumber, callInfo)
	mock.lockGetMinorNumber.Unlock()
	if mock.GetMinorNumberFunc == nil {
		var (
			nOut      int
			returnOut Return
		)
		return nOut, returnOut
	}
	return mock.GetMinorNumberFunc()
}

// GetMinorNumberCalls gets all the calls that were made to GetMinorNumber.
// Check the length with:
//
//	len(mockedDevice.GetMinorNumberCalls())
func (mock *DeviceMock) GetMinorNumberCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMinorNumber.RLock()
	calls = mock.calls.GetMinorNumber
	mock.lockGetMinorNumber.RUnlock()
	return calls
}

// GetNvLinkRemotePciInfo calls GetNvLinkRemotePciInfoFunc.
func (mock *DeviceMock) GetNvLinkRemotePciInfo(n int) (PciInfo, Return) {
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockGetNvLinkRemotePciInfo.Lock()
	mock.calls.GetNvLinkRemotePciInfo = append(mock.calls.GetNvLinkRemotePciInfo, callInfo)
	mock.lockGetNvLinkRemotePciInfo.Unlock()
	if mock.GetNvLinkRemotePciInfoFunc == nil {
		var (
			pciInfoOut PciInfo
			returnOut  Return
		)
		return pciInfoOut, returnOut
	}
	return mock.GetNvLinkRemotePciInfoFunc(n)
}

// GetNvLinkRemotePciInfoCalls gets all the calls that were made to GetNvLinkRemotePciInfo.
// Check the length with:
//
//	len(mockedDevice.GetNvLinkRemotePciInfoCalls())
func (mock *DeviceMock) GetNvLinkRemotePciInfoCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockGetNvLinkRemotePciInfo.RLock()
	calls = mock.calls.GetNvLinkRemotePciInfo
	mock.lockGetNvLinkRemotePciInfo.RUnlock()
	return calls
}

// GetNvLinkState calls GetNvLinkStateFunc.
func (mock *DeviceMock) GetNvLinkState(n int) (EnableState, Return) {
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockGetNvLinkState.Lock()
	mock.calls.GetNvLinkState = append(mock.calls.GetNvLinkState, callInfo)
	mock.lockGetNvLinkState.Unlock()
	if mock.GetNvLinkStateFunc == nil {
		var (
			enableStateOut EnableState
			returnOut      Return
		)
		return enableStateOut, returnOut
	}
	return mock.GetNvLinkStateFunc(n)
}

// GetNvLinkStateCalls gets all the calls that were made to GetNvLinkState.
// Check the length with:
//
//	len(mockedDevice.GetNvLinkStateCalls())
func (mock *DeviceMock) GetNvLinkStateCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockGetNvLinkState.RLock()
	calls = mock.calls.GetNvLinkState
	mock.lockGetNvLinkState.RUnlock()
	return calls
}

// GetPciInfo calls GetPciInfoFunc.
func (mock *DeviceMock) GetPciInfo() (PciInfo, Return) {
	callInfo := struct {
	}{}
	mock.lockGetPciInfo.Lock()
	mock.calls.GetPciInfo = append(mock.calls.GetPciInfo, callInfo)
	mock.lockGetPciInfo.Unlock()
	if mock.GetPciInfoFunc == nil {
		var (
			pciInfoOut PciInfo
			returnOut  Return
		)
		return pciInfoOut, returnOut
	}
	return mock.GetPciInfoFunc()
}

// GetPciInfoCalls gets all the calls that were made to GetPciInfo.
// Check the length with:
//
//	len(mockedDevice.GetPciInfoCalls())
func (mock *DeviceMock) GetPciInfoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetPciInfo.RLock()
	calls = mock.calls.GetPciInfo
	mock.lockGetPciInfo.RUnlock()
	return calls
}

// GetTopologyCommonAncestor calls GetTopologyCommonAncestorFunc.
func (mock *DeviceMock) GetTopologyCommonAncestor(device Device) (GpuTopologyLevel, Return) {
	callInfo := struct {
		Device Device
	}{
		Device: device,
	}
	mock.lockGetTopologyCommonAncestor.Lock()
	mock.calls.GetTopologyCommonAncestor = append(mock.calls.GetTopologyCommonAncestor, callInfo)
	mock.lockGetTopologyCommonAncestor.Unlock()
	if mock.GetTopologyCommonAncestorFunc == nil {
		var (
			gpuTopologyLevelOut GpuTopologyLevel
			returnOut           Return
		)
		return gpuTopologyLevelOut, returnOut
	}
	return mock.GetTopologyCommonAncestorFunc(device)
}

// GetTopologyCommonAncestorCalls gets all the calls that were made to GetTopologyCommonAncestor.
// Check the length with:
//
//	len(mockedDevice.GetTopologyCommonAncestorCalls())
func (mock *DeviceMock) GetTopologyCommonAncestorCalls() []struct {
	Device Device
} {
	var calls []struct {
		Device Device
	}
	mock.lockGetTopologyCommonAncestor.RLock()
	calls = mock.calls.GetTopologyCommonAncestor
	mock.lockGetTopologyCommonAncestor.RUnlock()
	return calls
}

// GetUUID calls GetUUIDFunc.
func (mock *DeviceMock) GetUUID() (string, Return) {
	callInfo := struct {
	}{}
	mock.lockGetUUID.Lock()
	mock.calls.GetUUID = append(mock.calls.GetUUID, callInfo)
	mock.lockGetUUID.Unlock()
	if mock.GetUUIDFunc == nil {
		var (
			sOut      string
			returnOut Return
		)
		return sOut, returnOut
	}
	return mock.GetUUIDFunc()
}

// GetUUIDCalls gets all the calls that were made to GetUUID.
// Check the length with:
//
//	len(mockedDevice.GetUUIDCalls())
func (mock *DeviceMock) GetUUIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUUID.RLock()
	calls = mock.calls.GetUUID
	mock.lockGetUUID.RUnlock()
	return calls
}

// RegisterEvents calls RegisterEventsFunc.
func (mock *DeviceMock) RegisterEvents(v uint64, eventSet EventSet) Return {
	callInfo := struct {
		V        uint64
		EventSet EventSet
	}{
		V:        v,
		EventSet: eventSet,
	}
	mock.lockRegisterEvents.Lock()
	mock.calls.RegisterEvents = append(mock.calls.RegisterEvents, callInfo)
	mock.lockRegisterEvents.Unlock()
	if mock.RegisterEventsFunc == nil {
		var (
			returnOut Return
		)
		return returnOut
	}
	return mock.RegisterEventsFunc(v, eventSet)
}

// RegisterEventsCalls gets all the calls that were made to RegisterEvents.
// Check the length with:
//
//	len(mockedDevice.RegisterEventsCalls())
func (mock *DeviceMock) RegisterEventsCalls() []struct {
	V        uint64
	EventSet EventSet
} {
	var calls []struct {
		V        uint64
		EventSet EventSet
	}
	mock.lockRegisterEvents.RLock()
	calls = mock.calls.RegisterEvents
	mock.lockRegisterEvents.RUnlock()
	return calls
}
